一种是按照原链表next的顺序依次创建节点，并处理好新链表的next指针，同时把原节点与新节点的对应关系保存到一个hash_map中，
然后第二次循环将random指针处理好。
/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
class Solution {
public:
    RandomListNode *copyRandomList(RandomListNode *head) {
        if(head==NULL)
            return NULL;
        RandomListNode* new_head=new RandomListNode(head->label);
        RandomListNode* node1=head;
        RandomListNode* node2=new_head;
        unordered_map<RandomListNode*,RandomListNode*> mp;
        while(node1->next!=NULL)
        {
            mp[node1]=node2;
            node1=node1->next;
            node2->next=new RandomListNode(node1->label);
            node2=node2->next;
        }
        mp[node1]=node2;
        node1=head;
        node2=new_head;
        while(node1->next!=NULL)
        {
            node2->random=mp[node1->random];
            node2=node2->next;
            node1=node1->next;
        }
        node2->random=mp[node1->random];
        return new_head;
    }
};


在原链表的每个节点之后插入一个新的节点，这样原节点与新节点的对应关系就已经明确了，
因此不需要用hash_map保存，但是需要第三次循环将整个链表拆分成两个
/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
class Solution {
public:
    RandomListNode *copyRandomList(RandomListNode *head) {
        /**
         * 假设：l1代表原链表中的节点；l2代表新链表中的节点
         */
        RandomListNode *new_head, *l1, *l2;
        if (head == NULL) return NULL;
        
        /**
         * 第一步：在每一个l1后面创建一个l2，并让l1指向l2，l2指向下一个l1；
         */
        for (l1 = head; l1 != NULL; l1 = l1->next->next) {
            l2 = new RandomListNode(l1->label);
            l2->next = l1->next;
            l1->next = l2;
        }
        
        /**
         * 第二步：给l2的random赋值，l1的random的next指向的就是l2的random的目标；
         */
        new_head = head->next;
        for (l1 = head; l1 != NULL; l1 = l1->next->next) {
            if (l1->random != NULL) l1->next->random = l1->random->next;
        }
        
        /**
         * 第三步：需要将整个链表拆成两个链表，具体做法是让l1的next指向后面的后面；
         *         l2的next也指向后面的后面。
         */
        for (l1 = head; l1 != NULL; l1 = l1->next) {
            l2 = l1->next;
            l1->next = l2->next;
            if (l2->next != NULL) l2->next = l2->next->next;
        }
        return new_head;
    }
};
