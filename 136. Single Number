二进制按位异或，会消去相同地数
类似的用法还有 &
如果两个相应的二进制位都为１，则该位的结果值为1；否则为0。
注：下面都用8位的 unsigned char 来做例子。
&比较实用的例子：
比如我们经常要用的是否被2整除，一般都写成   if(n % 2 == 0)
可以换成 if((n&1) == 0) 
|
如果两个相应的二进制位只要有一个是1，结果就是1；否则为0。linux下读写权限

//不用temp交换两个整数  
void swap(int& x , int& y)  
{  
    x ^= y;  
    y ^= x;  
    x ^= y;  
}   
~
这个在加法中用到
x-y = x + ~y + 1
所以~y = - y  -1
比如 ~11 = -11 -1 = -12
100%8的优化解法=100-floor((100>>3)<<3)
a%b=a-math.floor(a/b)*b
floor(x):不超过x的最大正整数
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int n=nums.size();
        if(n<1)
            return 0;
        int res=0;
        for(int i=0;i<n;++i)
            res^=nums[i];
        return res;
        
    }
};
