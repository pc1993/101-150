/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        return  findtree(inorder,0,inorder.size()-1,postorder,0,postorder.size()-1);
    }
    TreeNode* findtree(vector<int>& inorder,int i,int n, vector<int>& postorder,int j,int m)
    {
        if(i>n||j>m)
            return NULL;
        int mid=postorder[m];
        int count=find(inorder,i,mid);
        int dis=count-i;
        TreeNode* root=new TreeNode(mid);
        root->left=findtree(inorder,i,i+dis-1,postorder,j,j+dis-1);
        root->right=findtree(inorder,i+dis+1,n,postorder,j+dis,m-1);
        return root;
    }
    int find(vector<int>& inorder,int start,int num)
    {
        for(int i=start;i<inorder.size();++i)
        {
            if(inorder[i]==num)
                return i;
        }
        return -1;
    }
};
