/**
 * Definition for undirected graph.
 * struct UndirectedGraphNode {
 *     int label;
 *     vector<UndirectedGraphNode *> neighbors;
 *     UndirectedGraphNode(int x) : label(x) {};
 * };
 */
class Solution {
    private:
    unordered_map<UndirectedGraphNode*, UndirectedGraphNode*> map;
public:
    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {
        if(!node) return NULL;
        UndirectedGraphNode *graph=new UndirectedGraphNode(node->label);
        map[node]=graph;
        queue<UndirectedGraphNode*> que;
        que.push(node);
        while(!que.empty())
        {
            UndirectedGraphNode* cur=que.front();
            que.pop();
            for(UndirectedGraphNode* val:cur->neighbors)
            {
                if(map.find(val)==map.end())
                {
                    map[val]=new UndirectedGraphNode(val->label);
                    que.push(val);
                }
                map[cur]->neighbors.push_back(map[val]);
            }
        }
        return graph;
    }
};




class Solution {
public:
    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {
        if (!node) return NULL;
        if (mp.find(node) == mp.end()) {
            mp[node] = new UndirectedGraphNode(node -> label);
            for (UndirectedGraphNode* neigh : node -> neighbors)
                mp[node] -> neighbors.push_back(cloneGraph(neigh));
        }
        return mp[node];
    } 
private:
    unordered_map<UndirectedGraphNode*, UndirectedGraphNode*> mp;
};
