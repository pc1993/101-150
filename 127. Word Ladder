class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        int judge=0;
        for(int i=0;i<wordList.size();++i)
        {
            if(endWord==wordList[i])
                judge=1;
        }
        if(judge==0)
            return 0;
        unordered_set<string> wordDist;
        wordDist.insert(wordList.begin(),wordList.end());
        wordDist.insert(endWord);
        queue<string> toVisit;
        addNextWord(beginWord,wordDist,toVisit);
        int dis=2;
        while(!toVisit.empty())
        {
            int num=toVisit.size();
            for(int i=0;i<num;++i)
            {
                string word=toVisit.front();
                toVisit.pop();
                if(word==endWord)
                    return dis;
                addNextWord(word,wordDist,toVisit);
            }
            dis++;
        }
        return 0;
    }
private:
    void addNextWord(string beginWord,unordered_set<string>& wordDist,queue<string>& toVisit)
    {
        wordDist.erase(beginWord);
        for(int i=0;i<beginWord.size();++i)
        {
            char flag=beginWord[i];
            for(int k=0;k<26;++k)
            {
                beginWord[i]=k+'a';
                if(wordDist.find(beginWord)!=wordDist.end())
                {
                    toVisit.push(beginWord);
                    wordDist.erase(beginWord);
                }
            }
            beginWord[i]=flag;
        }
    }
};






class Solution {
public:
    int ladderLength(string beginWord, string endWord, unordered_set<string>& wordDict) {
        unordered_set<string> head, tail, *phead, *ptail;
        head.insert(beginWord);
        tail.insert(endWord);
        int dist = 2;
        while (!head.empty() && !tail.empty()) {
            if (head.size() < tail.size()) {
                phead = &head;
                ptail = &tail;
            }
            else {
                phead = &tail; 
                ptail = &head;
            }
            unordered_set<string> temp; 
            for (auto itr = phead -> begin(); itr != phead -> end(); itr++) {
                string word = *itr;
                wordDict.erase(word);
                for (int p = 0; p < (int)word.length(); p++) {
                    char letter = word[p];
                    for (int k = 0; k < 26; k++) {
                        word[p] = 'a' + k;
                        if (ptail -> find(word) != ptail -> end())
                            return dist;
                        if (wordDict.find(word) != wordDict.end()) {
                            temp.insert(word);
                            wordDict.erase(word);
                        }
                    }
                    word[p] = letter;
                }
            }
            dist++;
            swap(*phead, temp);
        }
        return 0; 
    }
};
